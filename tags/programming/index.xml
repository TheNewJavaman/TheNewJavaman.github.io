<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming on Gabriel Pizarro</title><link>https://javaman.net/tags/programming/</link><description>Recent content in programming on Gabriel Pizarro</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 06 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://javaman.net/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Virtual Reality for Flatscreen Unreal Engine Games</title><link>https://javaman.net/posts/1-intro/</link><pubDate>Wed, 06 Apr 2022 00:00:00 +0000</pubDate><guid>https://javaman.net/posts/1-intro/</guid><description>&lt;img src="https://javaman.net/posts/1-intro/cover.webp" alt="Featured image of post Virtual Reality for Flatscreen Unreal Engine Games" />&lt;p>Back in November 2021, I played Ghostrunner for the first time. Sure, its fast-paced wallrunning and slash-and-dash mechanics appealed to my short Gen-Z attention span — but more importantly, the game’s ambiance, constructed through the beautifully dystopian Dharma City and anxiety-inducing cyberpunk soundtrack, enticed me to go back and attempt a 100% completion. I never got there, although I did find and collect every katana, because I soon started chasing a different goal: I wanted to play Ghostrunner in virtual reality.&lt;/p>
&lt;p>It seemed simple enough: find a mod loader for Unreal Engine 4, reverse engineer the game binary, and load in one of Unreal Engine’s built-in VR cameras. It wasn’t that simple. First, there are a few mod loaders; I chose the most recently updated one, &lt;a class="link" href="https://github.com/RussellJerome/UnrealModLoader" target="_blank" rel="noopener"
>Russell.J’s UnrealModLoader&lt;/a>. Second, as it turns out, most UE4 games are not compiled and shipped with VR plugins, so it’s impossible to load in VR features on a whim. After a little digging, I came across the &lt;a class="link" href="http://flat2vr.com" target="_blank" rel="noopener"
>Flatscreen to VR Modding Community Discord&lt;/a>. There, some very helpful modders explained that unless Ghostrunner’s developers were willing to release modified binaries with the VR plugins baked in, what I wanted — my favorite game in VR — was nearly impossible.&lt;/p>
&lt;p>You can guess how I responded:&lt;/p>
&lt;blockquote>
&lt;p>“Oh, this will be super rough then” — Me in #general on February 15&lt;/p>
&lt;/blockquote>
&lt;p>And I was right.&lt;/p>
&lt;p>But first, let’s break down how our application will work. We need to create and link together a few components:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>VR Interface: a way to send rendered frames, get head tracking data, and receive controller input&lt;/p>
&lt;/li>
&lt;li>
&lt;p>RHI (Rendering Hardware Interface): a way to hijack Unreal Engine’s RHI, such that we can render from the perspectives of both the left and right eyes using the headset’s resolution and field of view&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Game Engine Interface: a way to send input to Unreal Engine if the user moves, presses a button, or otherwise needs to affect the game state&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>And of course, we need to package together those components in a way that can be injected into the game, preferably with a pretty interface. I’ll spoil the end a little; here’s how it looks:&lt;/p>
&lt;p>&lt;img src="https://javaman.net/posts/1-intro/cover.webp"
width="1920"
height="1037"
srcset="https://javaman.net/posts/1-intro/cover_hu29653758e9ac07b4bc88a51708907fce_188398_480x0_resize_q75_h2_box_2.webp 480w, https://javaman.net/posts/1-intro/cover_hu29653758e9ac07b4bc88a51708907fce_188398_1024x0_resize_q75_h2_box_2.webp 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="444px"
>&lt;/p>
&lt;p>And as of April 4 (a few days before this article will be released), it performs great, presenting games in full 3D with positional + rotational head tracking. There are still a few features to be implemented: input binding, DirectX 12 support, and so on (you can find a longer list of features at &lt;a class="link" href="https://unrealvr.dev" target="_blank" rel="noopener"
>unrealvr.dev&lt;/a>); but overall, the end goal — Ghostrunner in VR — is absolutely doable. Additionally, the code I’ve developed should work for any other Unreal Engine 4/DirectX 11 games; it’s just a matter of testing them out and fixing minor bugs if necessary.&lt;/p>
&lt;p>As the project progresses, I’ll continue releasing more articles here about the various techniques that have been developed for this mod: hacking the RHI, forwarding head-tracking input to the game engine, etc., so stay tuned for more!&lt;/p></description></item></channel></rss>